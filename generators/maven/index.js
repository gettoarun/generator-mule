// Generated by CoffeeScript 1.10.0
var CONFIG, MavenGenerator, PatcherService, XmlUtil, folderize, fs, generators, mvnConfig,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs');

generators = require('yeoman-generator');

mvnConfig = require('./maven-config');

folderize = require('../../common/util').folderize;

XmlUtil = require('../../common/xmlutil');

PatcherService = require('../../common/patcher');

CONFIG = mvnConfig.CONFIG;

MavenGenerator = (function(superClass) {
  extend(MavenGenerator, superClass);

  function MavenGenerator() {
    var key, ref, ref1, value;
    generators.Base.apply(this, arguments);
    ref = CONFIG["arguments"];
    for (key in ref) {
      value = ref[key];
      this.argument(key, value);
    }
    ref1 = CONFIG.options;
    for (key in ref1) {
      value = ref1[key];
      this.option(key, value);
    }
  }

  MavenGenerator.prototype.initializing = function() {
    var done, muleProjFile, self;
    this.log('initializing...');
    done = this.async();
    muleProjFile = this.destinationPath('./mule-project.xml');
    self = this;
    return fs.stat(muleProjFile, function(err, stats) {
      var mulePomFile;
      if (err && err.code === 'ENOENT') {
        self.log.error("The folder " + (self.destinationPath()) + " is not a mule project. please check.");
      }
      if (err && err.code === 'ENOENT') {
        self.env.error("");
      }
      mulePomFile = self.destinationPath('pom.xml');
      return fs.stat(mulePomFile, function(err, stats) {
        var doc, ns;
        if (err && (err.code = 'ENOENT')) {
          console.log("no pom file found at " + mulePomFile + ", will be creating one...", err, stats);
        }
        doc = XmlUtil.LoadXmlFile(mulePomFile);
        ns = {
          "pom": "http://maven.apache.org/POM/4.0.0"
        };
        self.group = XmlUtil.XPathValue(doc, '//pom:groupId/text()', ns);
        self.artifact = XmlUtil.XPathValue(doc, '//pom:artifactId/text()', ns);
        self.version = XmlUtil.XPathValue(doc, '/pom:project/pom:version/text()', ns);
        console.log("GROUP: ", self.group, "ARTIFACT ", self.artifact, "VERSION ", self.version);
        return done();
      });
    });
  };

  MavenGenerator.prototype.prompting = function() {
    var done, questions, self;
    this.log('prompting...');
    done = this.async();
    this.project = {
      mavenize: this.options.mvn === true,
      destination: {
        path: this.destinationPath()
      }
    };
    self = this;
    questions = [];
    questions.push(CONFIG.questions.group(self));
    questions.push(CONFIG.questions.artifact(self));
    questions.push(CONFIG.questions.version(self));
    questions.push(CONFIG.questions.edition(self));
    return this.prompt(questions, function(answers) {
      if (answers.group) {
        self.project.group = answers.group;
      }
      if (answers.artifact) {
        self.project.artifact = answers.artifact;
      }
      if (answers.versions) {
        self.project.version = answers.version;
      }
      self.project.community = void 0;
      if (self.options.community) {
        self.project.community = true;
      }
      if (self.options.enterprise) {
        self.project.community = false;
      }
      if (self.project.community === void 0) {
        self.project.community = /^CE/.test(answers.edition);
      }
      return done();
    });
  };

  MavenGenerator.prototype.writing = function() {
    var done, patcher;
    this.log('writing...');
    done = this.async();
    if (!fs.existsSync(this.destinationPath('pom.xml'))) {
      this.log("Creating pom files...");
      this.fs.copyTpl(this.templatePath('../../../templates/mule-maven/pom.xml'), this.destinationPath('./pom.xml'), {
        project: this.project,
        mule: CONFIG.mule
      });
    }
    this.log("patching pom.xml for mule edition: CE is " + this.project.community + "...");
    patcher = new PatcherService(this.templatePath('../../../templates/mule-maven/mule-maven-settings.yml'), this.project);
    patcher.fire(this.project.community ? 'ce' : 'un-ce');
    return done();
  };

  MavenGenerator.prototype.conflicts = function() {
    var done;
    this.log('Resolving...');
    done = this.async();
    return done();
  };

  MavenGenerator.prototype.end = function() {
    var done;
    this.log('cleaning up...');
    done = this.async();
    return done();
  };

  return MavenGenerator;

})(generators.Base);

module.exports = MavenGenerator;
