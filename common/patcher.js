// Generated by CoffeeScript 1.10.0
var PatcherService, XmlUtil, fs, yaml;

yaml = require('js-yaml');

fs = require('fs');

XmlUtil = require('./xmlutil');

PatcherService = (function() {
  function PatcherService(file1, options) {
    var error, error1;
    this.file = file1;
    this.options = options;
    this.loaded = false;
    try {
      this.doc = yaml.safeLoad(fs.readFileSync(this.file, 'utf8'));
      this.loaded = true;
    } catch (error1) {
      error = error1;
      console.error("Unable to load parser settings YAML file. " + this.file, error);
    }
  }

  PatcherService.prototype.fire = function(onEvent) {
    var action, file, filePath, i, key, len, project, ref, ref1, value;
    if (!this.loaded) {
      throw "Settings file not loaded. ";
    }
    console.log("applying actions for " + onEvent);
    ref = this.doc;
    for (key in ref) {
      value = ref[key];
      file = key;
      project = this.options;
      filePath = eval("`" + value.path + "`");
      console.log("processing " + file + " on file " + filePath + "...");
      ref1 = value.actions;
      for (i = 0, len = ref1.length; i < len; i++) {
        action = ref1[i];
        if (action.on === onEvent) {
          this.applyAction(filePath, project, action);
        }
        if (action.rollback.on === onEvent) {
          this.applyAction(filePath, project, action.rollback);
        }
      }
    }
    return console.log("done.");
  };

  PatcherService.prototype.applyAction = function(file, project, action) {
    switch (action.action) {
      case "add-xml-node":
        return this.addXmlNode(file, project, action);
      case "remove-xml-node":
        return this.removeXmlNode(file, project, action);
      default:
        throw "Unsupport action ( " + action.action + " ).";
    }
  };

  PatcherService.prototype.addXmlNode = function(file, project, action) {
    var doc, entries, thePath;
    console.log("adding xml nodes to " + file + "...");
    thePath = action.path;
    entries = action.content instanceof Array ? action.content : [action.content];
    doc = XmlUtil.LoadXmlFile(file);
    XmlUtil.AppendXmlStringsToXPath(doc, thePath, entries);
    return XmlUtil.WriteXmlFile(file, doc);
  };

  PatcherService.prototype.removeXmlNode = function(file, project, action) {
    var doc, thePath;
    console.log("removing xml nodes to " + file + "...");
    thePath = action.path;
    doc = XmlUtil.LoadXmlFile(file);
    XmlUtil.RemoveNodesByXPath(doc, thePath);
    return XmlUtil.WriteXmlFile(file, doc);
  };

  return PatcherService;

})();

module.exports = PatcherService;
